{"version":3,"sources":["_helpers/history.js","Context/expenseReducer.js","Context/index.js","components/transactions.js","pages/landing.js","App.js","serviceWorker.js","index.js"],"names":["history","createHashHistory","basename","hashType","expenseReducer","state","action","type","transactions","filter","transaction","id","payload","length","initialState","transactionName","amount","ExpenseContext","createContext","ExpenseProvider","children","useReducer","dispatch","Provider","value","deleteTransaction","addTransaction","newTransactionData","Transactions","props","useContext","map","className","key","onClick","Landing","App","path","render","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa72cade.chunk.js","sourcesContent":["import { createBrowserHistory, createHashHistory } from 'history';\n\n// export const history = createBrowserHistory();\n\nexport const history = createHashHistory({\n    basename: '/',\n    hashType: 'slash'\n});","export const expenseReducer = (state, action) => {\n  switch (action.type) {\n    case \"DELETE_TRANSACTION\":\n      return {\n        ...state,\n        transactions: state.transactions.filter(\n          transaction => transaction.id !== action.payload\n        )\n      };\n\n    case \"ADD_TRANSACTION\":\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          { id: state.transactions.length + 1, ...action.payload }\n        ]\n      };\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer } from \"react\";\nimport { expenseReducer } from \"./expenseReducer\";\nconst initialState = {\n  transactions: [\n    {\n      id: 1,\n      transactionName: \"dhaba\",\n      amount: -500\n    },\n    {\n      id: 2,\n      transactionName: \"coffee\",\n      amount: -10\n    },\n    {\n      id: 3,\n      transactionName: \"deepak\",\n      amount: 600\n    }\n  ]\n};\n\nexport const ExpenseContext = createContext(initialState);\n\nexport const ExpenseProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(expenseReducer, initialState);\n\n  const deleteTransaction = id => {\n    dispatch({\n      type: \"DELETE_TRANSACTION\",\n      payload: id\n    });\n  };\n\n  const addTransaction = newTransactionData => {\n    dispatch({\n      type: \"ADD_TRANSACTION\",\n      payload: {\n        transactionName: \"added new transaction\",\n        amount: \"-200\"\n      }\n    });\n  };\n\n  return (\n    <ExpenseContext.Provider\n      value={{\n        transactions: state.transactions,\n        deleteTransaction,\n        addTransaction\n      }}\n    >\n      {children}\n    </ExpenseContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { ExpenseContext } from \"../Context\";\n\nconst Transactions = props => {\n  const { transactions, deleteTransaction, addTransaction } = useContext(\n    ExpenseContext\n  );\n\n  return (\n    <div>\n      {transactions.map(transaction => (\n        <div className=\"d-flex flex-wrap py-2\" key={transaction.id}>\n          <p>{transaction[\"transactionName\"]}&nbsp; </p>\n          <p> Amount : {transaction[\"amount\"]}</p>\n          <button\n            onClick={() => deleteTransaction(transaction.id)}\n            className=\"btn btn-danger ml-auto\"\n          >\n            {\" \"}\n            Remove\n          </button>\n        </div>\n      ))}\n      <button onClick={()=>addTransaction()} className=\"btn btn-success\">Add Tranaction</button>\n    </div>\n  );\n};\nexport default Transactions;\n","import React from \"react\";\nimport { ExpenseProvider } from \"../Context\";\nimport Transactions from \"../components/transactions\";\n\nconst Landing = props => {\n  const transactions = [];\n\n  return (\n    <ExpenseProvider>\n      <div className=\"home-page d-flex justify-content-center align-items-center\">\n        <div className=\"col-md-8 col-12 main-content\">\n          <h2 className=\"text-center\">Expense Tracker</h2>\n          <Transactions />\n        </div>\n      </div>\n    </ExpenseProvider>\n  );\n};\nexport default Landing;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport { history } from \"./_helpers/history\";\nimport Landing from \"./pages/landing\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <Router history={history}>\n          <div>\n            <Switch>\n              <Route path=\"/expense\" render={Landing} />\n              <Redirect from=\"/\" to=\"/expense\" />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}